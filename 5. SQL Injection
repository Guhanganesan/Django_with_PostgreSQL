SQL injection is a serious security vulnerability where an attacker can execute arbitrary SQL commands in your database through insecure 
application code. Django provides robust mechanisms to prevent SQL injection by using its ORM (Object-Relational Mapper) and other security 
practices. Here’s how you can protect your Django application from SQL injection:

1. Use Django's ORM
The Django ORM is designed to prevent SQL injection by using parameterized queries. When you use Django’s query methods, such as .filter(), 
.exclude(), and .get(), Django automatically escapes parameters, which helps protect against SQL injection.

Example:

python
Copy code
# Safe usage with Django ORM
from myapp.models import MyModel

# This is safe
results = MyModel.objects.filter(name='example')
In this example, Django’s ORM handles escaping of the name parameter, preventing SQL injection.

2. Avoid Raw SQL Queries
Avoid using raw SQL queries whenever possible. Django's ORM should be your first choice for interacting with the database as it is designed
to be secure by default.

Example of raw SQL query (only use if necessary):

python
Copy code
from django.db import connection

def raw_query_example(param):
    with connection.cursor() as cursor:
        cursor.execute("SELECT * FROM myapp_mymodel WHERE name = %s", [param])
        return cursor.fetchall()
When you do need to use raw SQL, always use parameterized queries as shown above. Never concatenate user input directly into SQL queries.

3. Use Query Parameterization
If you must use raw SQL, make sure to use Django's parameterized queries to avoid SQL injection. The parameterized queries ensure that user 
inputs are properly escaped.

Example:

python
Copy code
from django.db import connection

def get_user_by_id(user_id):
    with connection.cursor() as cursor:
        cursor.execute("SELECT * FROM auth_user WHERE id = %s", [user_id])
        return cursor.fetchone()
In this example, %s is a placeholder, and user_id is safely passed as a parameter.

4. Validate and Sanitize User Inputs
Always validate and sanitize user inputs, even when using Django’s ORM. This helps ensure that data conforms to expected formats and reduces
the risk of malicious data.

Example:

python
Copy code
from django import forms

class MyForm(forms.Form):
    name = forms.CharField(max_length=100)

    def clean_name(self):
        data = self.cleaned_data['name']
        # Additional validation or sanitization
        return data
5. Use Django’s QuerySet Methods
Use Django’s QuerySet methods for complex queries rather than raw SQL. Methods like .filter(), .exclude(), .annotate(), and .aggregate() 
are built to be safe and prevent SQL injection.

Example:

python
Copy code
# Safe usage with QuerySet methods
users = User.objects.filter(username__icontains='admin')
6. Use Database Constraints and Validation
Enforce database constraints and validations to ensure that data integrity is maintained. This includes using unique constraints, foreign key
constraints, and checking data validity.

Example:

python
Copy code
from django.db import models

class MyModel(models.Model):
    name = models.CharField(max_length=100, unique=True)
7. Keep Django and Dependencies Updated
Ensure that you are using the latest version of Django and that all your dependencies are up to date. Security patches and updates often 
address vulnerabilities, including SQL injection.

8. Review and Audit Code
Regularly review and audit your code for potential vulnerabilities. Automated tools can help, but manual reviews are also essential to 
ensure security.

9. Leverage Security Tools
Use security tools and services to scan your application for vulnerabilities, including SQL injection risks. Tools like OWASP ZAP and Burp 
Suite can help identify potential issues.

Summary:-

To protect your Django application from SQL injection:

Prefer using Django’s ORM for database interactions.
Avoid raw SQL queries when possible, and if necessary, use parameterized queries.
Validate and sanitize user inputs.
Use Django’s QuerySet methods for complex queries.
Enforce database constraints.
Keep your software updated.
Regularly review and audit code.
Use security tools to identify vulnerabilities.
By following these practices, you can significantly reduce the risk of SQL injection and enhance the security of your Django application.