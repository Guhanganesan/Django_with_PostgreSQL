Custom form validation in Django allows you to enforce rules and constraints on your form data beyond what is provided by default field validation. You can implement custom validation both at the field level and at the form level. Here’s a guide on how to do both:

### 1. **Custom Field Validation**

Field-level validation is used to validate individual fields within a form. You can create custom validators by defining a function or a method, and then assigning it to a field.

#### **1.1 Using Custom Validation Functions**

- **Custom Validator Function**: Define a function that performs the validation logic and raises a `ValidationError` if the data is invalid.

  ```python
  from django.core.exceptions import ValidationError

  def validate_positive(value):
      if value <= 0:
          raise ValidationError('Value must be positive.')
  ```

- **Using the Custom Validator**: Assign this validator to a form field.

  ```python
  from django import forms

  class MyForm(forms.Form):
      amount = forms.IntegerField(validators=[validate_positive])
  ```

#### **1.2 Using `clean_<fieldname>` Methods**

- **Field-Specific Validation**: Define a method named `clean_<fieldname>` in your form class to handle validation for a specific field.

  ```python
  from django import forms

  class MyForm(forms.Form):
      age = forms.IntegerField()

      def clean_age(self):
          age = self.cleaned_data.get('age')
          if age and age < 0:
              raise forms.ValidationError('Age must be a positive integer.')
          return age
  ```

### 2. **Custom Form Validation**

Form-level validation is used to validate data that involves multiple fields or requires more complex validation logic.

#### **2.1 Using `clean` Method**

- **Form-Wide Validation**: Override the `clean` method to perform validation that involves multiple fields or custom logic.

  ```python
  from django import forms

  class MyForm(forms.Form):
      password = forms.CharField(widget=forms.PasswordInput())
      confirm_password = forms.CharField(widget=forms.PasswordInput())

      def clean(self):
          cleaned_data = super().clean()
          password = cleaned_data.get('password')
          confirm_password = cleaned_data.get('confirm_password')

          if password and confirm_password and password != confirm_password:
              self.add_error('confirm_password', 'Passwords do not match.')
  ```

#### **2.2 Using `clean_<fieldname>` Method for Cross-Field Validation**

- **Cross-Field Validation**: Although the `clean` method is typically used for cross-field validation, you can still perform specific field validations in the `clean_<fieldname>` method if necessary.

### 3. **Custom Validators**

#### **3.1 Creating a Custom Validator Class**

- **Custom Validator Class**: Create a custom validator by defining a class with a `__call__` method that performs validation.

  ```python
  from django.core.exceptions import ValidationError

  class EvenNumberValidator:
      def __call__(self, value):
          if value % 2 != 0:
              raise ValidationError('Value must be an even number.')

  # Using the custom validator
  class MyForm(forms.Form):
      number = forms.IntegerField(validators=[EvenNumberValidator()])
  ```

#### **3.2 Validators with Arguments**

- **Custom Validator with Arguments**: Define a validator that accepts arguments to customize its behavior.

  ```python
  from django.core.exceptions import ValidationError

  def validate_max_length(value, max_length):
      if len(value) > max_length:
          raise ValidationError(f'Value must be at most {max_length} characters long.')

  class MyForm(forms.Form):
      username = forms.CharField(validators=[lambda value: validate_max_length(value, 10)])
  ```

### 4. **Handling Validation Errors**

- **Accessing Errors**: After form validation, you can access errors using `form.errors` or `form.non_field_errors()`.

  ```python
  form = MyForm(request.POST)
  if form.is_valid():
      # Process data
      pass
  else:
      errors = form.errors
      non_field_errors = form.non_field_errors()
  ```

### 5. **Example Form with Custom Validation**

Here’s a full example demonstrating custom field and form-level validation:

```python
from django import forms
from django.core.exceptions import ValidationError

# Custom field-level validator
def validate_even_number(value):
    if value % 2 != 0:
        raise ValidationError('Value must be an even number.')

# Custom form-level validation
class CustomForm(forms.Form):
    name = forms.CharField(max_length=100)
    age = forms.IntegerField(validators=[validate_even_number])
    email = forms.EmailField()
    
    def clean(self):
        cleaned_data = super().clean()
        name = cleaned_data.get('name')
        email = cleaned_data.get('email')

        # Example: Ensure name does not contain email domain
        if email and name and email.split('@')[1] in name:
            self.add_error('name', 'Name should not contain email domain.')
```

### Summary

1. **Field-Level Validation**: Use custom validator functions or `clean_<fieldname>` methods to validate individual fields.
2. **Form-Level Validation**: Override the `clean` method to validate data across multiple fields or perform more complex logic.
3. **Custom Validators**: Create custom validator classes or functions with specific logic or parameters.
4. **Handling Errors**: Access and handle validation errors using `form.errors` or `form.non_field_errors()`.

By implementing custom validation, you can ensure that your Django forms enforce the rules and constraints necessary for your application's data integrity and user experience.