Djangoâ€™s **humanization** utilities are designed to make data more readable and user-friendly, often by converting machine-friendly formats into more human-readable ones. This is especially useful for improving the presentation of data on your site.

### **Built-in Humanization Utilities**

Django provides a set of built-in utilities in the `django.contrib.humanize` module. You need to include this module in your `INSTALLED_APPS` to use the humanization features.

Here's how to use them:

#### **1. **Installing Humanize**

1. **Add to `INSTALLED_APPS`**:
   
   Make sure `django.contrib.humanize` is added to your `INSTALLED_APPS` in `settings.py`.

   ```python
   INSTALLED_APPS = [
       ...
       'django.contrib.humanize',
       ...
   ]
   ```

2. **Load the Humanize Template Tag Library**:
   
   Use the `{% load humanize %}` tag at the beginning of your template to access humanization filters.

   ```html
   {% load humanize %}
   ```

#### **2. **Humanization Filters**

Here are some of the most commonly used humanization filters:

**2.1 `intcomma`**

- **Description**: Formats an integer with thousands separators (commas).
- **Example**:

  ```html
  {{ value|intcomma }}
  ```

  For `1234567`, the output will be `1,234,567`.

**2.2 `intword`**

- **Description**: Converts a large integer into a human-readable format using common units (e.g., thousands, millions).
- **Example**:

  ```html
  {{ value|intword }}
  ```

  For `1234567`, the output will be `1.2 million`.

**2.3 `naturalday`**

- **Description**: Formats a date in a natural, human-readable way relative to today (e.g., "Yesterday", "2 days ago").
- **Example**:

  ```html
  {{ value|naturalday }}
  ```

  For `datetime.date.today() - timedelta(days=1)`, the output will be `Yesterday`.

**2.4 `naturaltime`**

- **Description**: Provides a human-readable time format that is relative to now (e.g., "2 hours ago", "in 3 days").
- **Example**:

  ```html
  {{ value|naturaltime }}
  ```

  For `datetime.datetime.now() - timedelta(hours=2)`, the output will be `2 hours ago`.

**2.5 `naturalday` and `naturaltime` Usage Example**:

  ```html
  <p>Posted on: {{ post_date|naturalday }}</p>
  <p>Updated: {{ update_time|naturaltime }}</p>
  ```

**2.6 `apnumber`**

- **Description**: Converts numbers into their word equivalents as used in AP style.
- **Example**:

  ```html
  {{ value|apnumber }}
  ```

  For `101`, the output will be `one hundred one`.

**2.7 `ordinal`**

- **Description**: Converts an integer to its ordinal representation (e.g., 1 to 1st, 2 to 2nd).
- **Example**:

  ```html
  {{ value|ordinal }}
  ```

  For `3`, the output will be `3rd`.

**2.8 `ordinal` Example**:

  ```html
  <p>Ranking: {{ rank|ordinal }}</p>
  ```

#### **3. **Humanization in Views**

You can also use humanization utilities in your views by calling the relevant functions directly. For example:

```python
from django.contrib.humanize.templatetags.humanize import intcomma, intword

def my_view(request):
    number = 1234567
    formatted_number = intcomma(number)
    word_format = intword(number)
    return render(request, 'my_template.html', {
        'formatted_number': formatted_number,
        'word_format': word_format,
    })
```

In your template:

```html
<p>Formatted Number: {{ formatted_number }}</p>
<p>Word Format: {{ word_format }}</p>
```

### Summary

Django's humanization utilities are great for transforming data into a more human-friendly format, enhancing the user experience by making numbers, dates, and times easier to understand at a glance. By utilizing the `django.contrib.humanize` module, you can improve the readability and presentation of your application's data in both templates and views. For more information, you can refer to the [Django humanization documentation](https://docs.djangoproject.com/en/stable/ref/contrib/humanize/).