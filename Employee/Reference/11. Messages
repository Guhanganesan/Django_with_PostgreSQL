Django's messaging framework allows you to send temporary messages to users. This feature is particularly useful for providing feedback or notifications to users after they perform actions, such as submitting a form or completing a transaction.

### 1. **Setting Up**

To use Django's messaging framework, you need to include it in your project’s settings and templates.

#### Configuration

1. **Add Middleware**: Ensure that `django.contrib.messages.middleware.MessageMiddleware` is included in your `MIDDLEWARE` setting in `settings.py`.

    ```python
    # settings.py
    MIDDLEWARE = [
        # ... other middleware
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]
    ```

2. **Add Context Processor**: Make sure `django.contrib.messages.context_processors.messages` is added to your `TEMPLATES` context processors.

    ```python
    # settings.py
    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR, 'templates')],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]
    ```

### 2. **Using Messages in Views**

Django provides a `messages` framework that you can use in your views to add messages. There are several message levels, each representing a different type of message:

- `messages.debug` – For debugging information.
- `messages.info` – For general informational messages.
- `messages.success` – For success messages.
- `messages.warning` – For warning messages.
- `messages.error` – For error messages.

#### Example Usage

```python
from django.shortcuts import render, redirect
from django.contrib import messages

def my_view(request):
    # Add a success message
    messages.success(request, 'Your changes have been saved.')
    
    # Add an error message
    messages.error(request, 'There was an error processing your request.')
    
    return redirect('some_view')
```

### 3. **Displaying Messages in Templates**

To display messages in your templates, you use the `{% if messages %}` template tag provided by Django. This tag will loop through all the messages and display them.

#### Example Template

```html
{% if messages %}
    <div class="messages">
        {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">
                {{ message }}
            </div>
        {% endfor %}
    </div>
{% endif %}
```

### 4. **Customizing Message Tags**

By default, Django uses certain tags for styling messages (e.g., `success`, `error`). You can customize these tags in your template to match your CSS classes.

#### Example with Custom Tags

```html
<div class="messages">
    {% for message in messages %}
        <div class="alert alert-{{ message.tags }}">
            {{ message }}
        </div>
    {% endfor %}
</div>
```

You can use `message.tags` to apply specific CSS classes or handle different types of messages.

### 5. **Advanced Usage**

#### Custom Message Storage

You can customize where messages are stored by modifying the `MESSAGE_STORAGE` setting in `settings.py`. For example, to use cookie-based storage:

```python
# settings.py
MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'
```

#### Flash Messages Across Redirects

Messages are typically displayed after a redirect and are meant to last only for a single request. If you need to persist messages across redirects or longer sessions, you'll need to handle this with custom logic or middleware.

### 6. **Example: Handling Form Submission**

Here’s a complete example that uses messages in a form submission:

```python
# views.py
from django.shortcuts import render, redirect
from django.contrib import messages
from .forms import MyForm

def form_view(request):
    if request.method == 'POST':
        form = MyForm(request.POST)
        if form.is_valid():
            # Process form data
            messages.success(request, 'Form submitted successfully!')
            return redirect('form_view')
        else:
            messages.error(request, 'Please correct the errors below.')
    else:
        form = MyForm()

    return render(request, 'form_template.html', {'form': form})
```

In `form_template.html`:

```html
{% if messages %}
    <div class="messages">
        {% for message in messages %}
            <div class="alert alert-{{ message.tags }}">
                {{ message }}
            </div>
        {% endfor %}
    </div>
{% endif %}

<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Submit</button>
</form>
```

### Summary

- **Setup**: Configure `MIDDLEWARE` and `TEMPLATES` in `settings.py`.
- **Usage**: Add messages in views using `messages.success()`, `messages.error()`, etc.
- **Display**: Show messages in templates using `{% if messages %}` and `{% for message in messages %}`.
- **Customization**: Adjust message tags and storage as needed.

Using Django’s messaging framework helps in providing feedback to users in a clean and manageable way, enhancing the user experience on your website.