Sending emails in Django is a straightforward process thanks to Django’s built-in email handling features. Django provides a robust framework for sending email messages, which can be configured to work with various email backends and services. Here’s a comprehensive guide on how to send emails in Django.

### 1. **Basic Email Sending**

Django provides a simple API for sending email messages using the `send_mail` function from `django.core.mail`.

#### Configuration

1. **Set Up Email Backend:**

   First, configure the email backend settings in your `settings.py` file. Django supports various email backends, including SMTP, console, file-based, and in-memory.

   For development, you can use the console backend to print emails to the console:

   ```python
   # settings.py
   EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
   ```

   For production, you typically use an SMTP backend:

   ```python
   # settings.py
   EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
   EMAIL_HOST = 'smtp.example.com'
   EMAIL_PORT = 587
   EMAIL_USE_TLS = True
   EMAIL_HOST_USER = 'your-email@example.com'
   EMAIL_HOST_PASSWORD = 'your-email-password'
   ```

2. **Send an Email:**

   Use the `send_mail` function to send a simple email.

   ```python
   # views.py
   from django.core.mail import send_mail
   from django.http import HttpResponse

   def send_test_email(request):
       send_mail(
           'Subject here',
           'Here is the message.',
           'from@example.com',
           ['to@example.com'],
           fail_silently=False,
       )
       return HttpResponse("Email sent!")
   ```

### 2. **Advanced Email Features**

Django also supports more advanced features like sending HTML emails, attaching files, and using email templates.

#### Sending HTML Emails

You can send HTML emails using the `EmailMessage` or `EmailMultiAlternatives` classes.

```python
from django.core.mail import EmailMultiAlternatives
from django.template.loader import render_to_string

def send_html_email(request):
    subject = 'Subject here'
    from_email = 'from@example.com'
    to_email = 'to@example.com'
    text_content = 'This is an important message.'
    html_content = render_to_string('email_template.html', {'context_variable': 'value'})
    
    msg = EmailMultiAlternatives(subject, text_content, from_email, [to_email])
    msg.attach_alternative(html_content, "text/html")
    msg.send()
    return HttpResponse("HTML email sent!")
```

In the above example:
- `render_to_string` is used to render an HTML template into a string.
- `EmailMultiAlternatives` allows you to send both plain text and HTML content.

#### Sending Emails with Attachments

You can attach files to your email using the `EmailMessage` class.

```python
from django.core.mail import EmailMessage

def send_email_with_attachment(request):
    subject = 'Subject here'
    body = 'Here is the message with an attachment.'
    from_email = 'from@example.com'
    to_email = 'to@example.com'
    
    email = EmailMessage(subject, body, from_email, [to_email])
    email.attach_file('/path/to/attachment.pdf')
    email.send()
    return HttpResponse("Email with attachment sent!")
```

### 3. **Using Django Templates for Emails**

For better email formatting, you can use Django templates to compose your email content.

#### Example Template

Create a template file named `email_template.html` in your `templates` directory:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Email</title>
</head>
<body>
    <h1>Hello {{ user_name }}!</h1>
    <p>Thank you for signing up. Here are your details:</p>
    <p>Email: {{ user_email }}</p>
</body>
</html>
```

#### Render Template in Email

```python
from django.core.mail import EmailMultiAlternatives
from django.template.loader import render_to_string

def send_email_with_template(request):
    subject = 'Welcome!'
    from_email = 'from@example.com'
    to_email = 'to@example.com'
    context = {'user_name': 'John Doe', 'user_email': 'john.doe@example.com'}
    
    text_content = 'This is an important message.'
    html_content = render_to_string('email_template.html', context)
    
    msg = EmailMultiAlternatives(subject, text_content, from_email, [to_email])
    msg.attach_alternative(html_content, "text/html")
    msg.send()
    return HttpResponse("Email with template sent!")
```

### 4. **Handling Email Failures**

You can use the `fail_silently` parameter to handle errors gracefully. If `fail_silently` is `False`, Django will raise an exception if the email fails to send.

```python
send_mail(
    'Subject here',
    'Here is the message.',
    'from@example.com',
    ['to@example.com'],
    fail_silently=False,
)
```

### 5. **Testing Email Sending**

For testing purposes, you can use the console backend to print email content to the terminal:

```python
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
```

This backend is useful for development to verify that email-related code is working without actually sending emails.

### Summary

- **Basic Email**: Use `send_mail` for simple email sending.
- **Advanced Features**: Use `EmailMultiAlternatives` for HTML emails, and `EmailMessage` for attachments.
- **Templates**: Utilize Django’s templating system to format email content.
- **Testing**: Use the console backend for development and testing.

Django’s email framework makes it easy to send and manage emails, and its integration with templates and attachments allows for sophisticated email handling in web applications.